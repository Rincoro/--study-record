# rubyメソッド集

## <upto>

uptoメソッドとは、オブジェクトの数値を、引数の数値になるまで、

処理を繰り返し行うメソッドです。

基本形

```ruby
オブジェクト.upto(max) do |変数|
    繰り返し処理
end
```

※このオブジェクトは数値が好ましいです

※(max)の値に入った数回数分繰り返し処理がおこなわれます

※|変数|は、繰り返し処理にて使う変数です

＜使用例＞

```ruby
1.upto(10) do |i| ⬅︎iには、オブジェクト(1)が入リマス
  if i.even?
    puts i
  end
end
```

実行結果は以下のとおりです

```ruby
2
4
6
8
10
```

解説

- このコードは、1から、10（max）回まで、do〜end内の繰り返し処理を行います。
- 変数『i』には、最初に指定したオブジェクト（今回は1が入ってきます）

 ＜応用例＞１

```ruby
def algorithm_01(number)
  response = []
  1.upto(number) do |i|
    if i % 3 == 0 && i % 5 == 0
      response << "らんてくん"
    elsif i % 3 == 0
      response << "らんて"
    elsif i % 5 == 0
      response << "くん"
    else
      response << i
    end
  end
  response
end
```

＜解説＞

これは、algorithm_01(number)メソッドで、

引数（number)回分、配列responseに、数値を入れ込みます。

その際に、if文で条件に合う数値は各々の数値は文字に変換し、配列を表示するというメソッドです。

実行結果 

```ruby
（例）algorithm_01(15)の場合、

[1, 2, "らんて", 4, "くん", "らんて", 7, 8, "らんて", "くん", 11, "らんて", 13, 14, "らんてくん"]

```

uptoとは逆の意味を持つdowntomwソッドもあります。

以下を参考にしてみてください

https://www.sejuku.net/blog/67653

### ＜each_with_index＞

each_with_indexメソッドとは、

一般的なeachメソッドに加えて、配列の要素の番号も扱うことができるメソッドです！

つまりeach文に番号要素をつけられた応用的メソッド！

＜書き方＞

```ruby
配列名.each_with_index do |item（配列の要素）, i（配列の要素番号）|
```

配列内の要素を、変数[ item ]に、配列の要素を入れて、変数[ i ]には、配列の順番の番号を入れ込みます。

2つの変数を使い、do~endの処理を、配列の要素分繰り返し

実行します！

＜使用例＞

```ruby
sports=[“サッカー”, “テニス”, “野球”]

#配列sportsを用意

sports.each_with_index do |item, i|

puts “#{i}番目の要素は#{item}です。”

end

【結果】

0番目の要素はサッカーです。

1番目の要素はテニスです。

2番目の要素は野球です。
```

## Ruby each_with_indexの値を１から始める方法

ノーマルの状態では、値(i)が0からスタートします。

0からではなく、1から始めたいという場合

以下のようにします！

**⭐️**「#{i}」を、「#{i+1}」に変更します。

```ruby
sports=[“サッカー”, “テニス”, “野球”]

#配列sportsを用意

sports.each_with_index do |item, i|

puts “#{i+1}番目の要素は#{item}です。”

end

【結果】

1番目の要素はサッカーです。

2番目の要素はテニスです。

3番目の要素は野球です。
```

Ruby each_with_indexで

**値(i)を1から始めたい場合は、「#{i}」を「#{i+1}」に変更する。**

これをしっかり覚えておきましょう！

＜応用編＞

```ruby
def algorithm_03(word)
  odd = []
  even = []
  word.chars.each_with_index do |_,index|
    if index.odd?
      odd << word[index]
    else
      even << word[index]
    end
  end
  return even.join +  odd.join
end
```

このdef algorithm_03(word)メソッドは、

変数wordの値（これは文字列とする）を、charsメソッドで

一文字ずつ配列の要素にしてwordの中身を配列に変換する。

そして、with_indexメソッドで、配列のindex番目は偶数か、奇数かで、各々配列odd,evenに入れ込み、表示させている。

## Ruby each_with_indexとeach.with_indexの違い

### ＜each.with_indexとは？＞

**each.with_indexは、each_with_indexよりも簡単に0以外の値から開始させることができるメソッドです。**

**【Ruby each.with_indexの書き方】**

```ruby
配列名.each.with_index(開始させたい値) do |item, i|
```

＜使用例＞ 開始させた値は30からです。

```ruby
fruites = [“リンゴ”, “メロン”, “ブドウ”]

#配列fruitesを用意

fruites.each.with_index(30) do |item, i|

puts “#{i}番目のフルーツは#{item}です。”

end

【結果】

30番目のフルーツはリンゴです。

31番目のフルーツはメロンです。

32番目のフルーツはブドウです。
```

each.with_index(30)この引数30の部分で、iがなんの数値から始めるか指定することが出来ます。

結論

**値を0以外から開始させたい場合はeach_with_indexよりもeach.with_indexの方が直感的には分かりやすいかも**

参考：https://udemy.benesse.co.jp/development/system/ruby-each-with-index.html　

## ＜chars＞

- charsメソッドとは、rubyの場合、文字列を1文字ずつ分割してそのまま配列にしてくれるメソッドです！

使用例

```ruby
morning = "hello世界".chars # => ["h", "e", "l", "l", "o", "世", "界"]
```

これで、変数morningには、 "hello世界”を一文字づつ要素に変えた配列が代入されている。

## <split>

splitメソッドも、文字列を分解して配列にするメソッドですが

charsと違い、半角スペースで区切って文字列を分解します。

＜例＞

```ruby
str = "samurai engineer blog"

array = str.split

p array

実行結果：

["samurai", "engineer", "blog"]
```

またsplitメソッドは区切り文字を指定できます！

```ruby
文字列.split(区切り文字)
```

＜例＞

```ruby
str = "samurai,engineer,blog"

array = str.split(",")

p array
実行結果：

["samurai", "engineer", "blog"]
```

文字列でも区切り文字に指定できます

```ruby
str = "123456"

array = str.split("45")

p array
実行結果：

["123", "6"]
```

## <gsub>

gsubは、対象になる文字列内の部分を置換させるメソッドのことです。(subメソッドの応用版）

<使い方>

```ruby
文字列.gsub(/正規表現(変換される文字）/, '変換後の文字')
```

<例>

```ruby
"hogehoge".gsub("hoge","ruby")
=> "rubyruby"
```

gsubは、対象になるすべての文字列内の部分をすべて変換します。

subメソッドは、マッチした最初の一箇所だけを変換します。

＜応用例題＞

```ruby
def algorithm_04(text)
  words = []
  text.split.each do |word|
    cleaned_word = word.gsub(/[,.]/, '') # コンマとピリオドを削除
    words << cleaned_word.size # 単語の長さを配列に追加
  end
  return words
end
```

このコードは、英文の文字列を、半角スペースごとで

区切って、配列に変換します。

そして、変数cleaned_wordに、gsub(/[,.]/, '') で コンマとピリオドを削除した配列を、代入します。

そして、空の配列wordsに、cleaned_wordないに入った配列要素を、すべて文字数の数字に変えた配列を代入させています。

置換メソッドについては以下を参考にしてください

https://www.sejuku.net/blog/14685
