# resourceの複数形と単数系

まず、resourcesとは、ルーティング内に、resourcesと宣言するだけで、

コントローラでの、`index`、`show`、`new`、`edit`、`create`、`update`、`destroy`アクションを個別に宣言しなくても全部宣言させることが可能になるめちゃ便利な機能です！

ちなみにresourcesがないと、

いちいち`get '/patients/:id', to: 'patients#show', as: 'patient'` など、

どのurlに、なんのHTTPアクションで、コントローラー内のどのアクションかを指定しないといけないんです！

めっちゃresorcesって便利ですね！

<ここから本題！>

resourcesには、単数系のresourceが存在するのですが、この２つの違いってなんなの？

ざっくりいうとこんな感じ！

**①[resources] indexアクションあり**

    **[resource]**    **indexアクションなし**

**②[resources] urlに:idを含む**

    **[resource] urlに:idを含まない**

つまり、単数系resourceは、idを参照しなくてもいい場合に使用するルーティングです。

(例）ユーザーの、プロフィール閲覧機能や、ユーザープロフィールの表示機能。

※この場合、プロフィールの表示機能は、自分のプロフィールしか見ないし、自分のプロフィールしか見れないようにすることが望ましいです。

そのため。resourceで、単数系にすることで、そもそも、idがurlに入り込まないようにしている！

そもそもプロフィールはユーザー一人に対して、一つの情報のみ取り扱うので、resourceを使ってルーティング設定する。

## ＜resource（単数系）の、ルーティング＞

わたしゃここで勘違いしていました！ルーティングで単数系resouce って、ことはコントローラーも単数系だよね！と…。

はい！　違います！

単数形リソースは複数形のコントローラーに対応できます！

これは、同じコントローラで単数形のルーティング（`/account`）と複数形のルーティング（`/accounts/45`）を両方使いたい場合を想定しているためです。

例えば、`resource :profile`と`resources :profiles`のように単数系ルーティングと複数形ルーティングを両方作成した場合、この二つのルーティングに対するアクションを、`profilesController`というコントローラーに一つにまとめることができ、簡単になったプログラミングが出来上がリマス！

簡単にいうと、railsは、基本的にコントローラーは複数形にするのが鉄則です！

もちろん例外もあります。間違っていたらすみません😭
